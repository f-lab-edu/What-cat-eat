"""empty message

Revision ID: f10a43f2c946
Revises:
Create Date: 2023-03-19 23:36:44.597210

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "f10a43f2c946"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("pet_food_nutrient")
    op.drop_table("pet_food_component")
    op.drop_table("nutrient")
    op.drop_index("ix_pet_food_name", table_name="pet_food")
    op.drop_table("pet_food")
    op.drop_table("cat")
    op.drop_table("user")
    op.drop_table("allergy")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "allergy",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "allergy_name", sa.VARCHAR(length=20), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name="allergy_pkey"),
    )
    op.create_table(
        "user",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "user_id", sa.VARCHAR(length=15), autoincrement=False, nullable=False
        ),
        sa.Column(
            "password", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "nickname", sa.VARCHAR(length=15), autoincrement=False, nullable=False
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="user_pkey"),
        sa.UniqueConstraint("nickname", name="user_nickname_key"),
        sa.UniqueConstraint("user_id", name="user_user_id_key"),
    )
    op.create_table(
        "cat",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("represent_cat", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=15), autoincrement=False, nullable=False),
        sa.Column("birth", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("img", sa.VARCHAR(length=2083), autoincrement=False, nullable=True),
        sa.Column("gender", sa.VARCHAR(length=6), autoincrement=False, nullable=False),
        sa.Column(
            "species", sa.VARCHAR(length=20), autoincrement=False, nullable=False
        ),
        sa.Column("weight", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="cat_pkey"),
    )
    op.create_table(
        "pet_food",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('pet_food_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(length=30), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="pet_food_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_pet_food_name", "pet_food", ["name"], unique=False)
    op.create_table(
        "nutrient",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('nutrient_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "nutrient_name", sa.VARCHAR(length=30), autoincrement=False, nullable=False
        ),
        sa.Column("percentage", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("is_above", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="nutrient_pkey"),
        sa.UniqueConstraint(
            "nutrient_name",
            "percentage",
            "is_above",
            name="nutrient_nutrient_name_percentage_is_above_key",
        ),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "pet_food_component",
        sa.Column("pet_food_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("component_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["pet_food_id"], ["pet_food.id"], name="pet_food_component_pet_food_id_fkey"
        ),
        sa.PrimaryKeyConstraint(
            "pet_food_id", "component_id", name="pet_food_component_pkey"
        ),
    )
    op.create_table(
        "pet_food_nutrient",
        sa.Column("pet_food_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("nutrient_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["nutrient_id"], ["nutrient.id"], name="pet_food_nutrient_nutrient_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["pet_food_id"], ["pet_food.id"], name="pet_food_nutrient_pet_food_id_fkey"
        ),
        sa.PrimaryKeyConstraint(
            "pet_food_id", "nutrient_id", name="pet_food_nutrient_pkey"
        ),
    )
    # ### end Alembic commands ###
